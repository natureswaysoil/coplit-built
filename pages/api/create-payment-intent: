import type { NextApiRequest, NextApiResponse } from 'next'
import Stripe from 'stripe'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' })

  const secret = process.env.STRIPE_SECRET_KEY
  if (!secret) return res.status(500).json({ error: 'Missing STRIPE_SECRET_KEY' })

  try {
    const stripe = new Stripe(secret)

    const {
      amount,             // dollars (e.g. 49.99)
      currency = 'usd',
      email,
      shipping,           // optional { address1, address2, city, state, zip, county, phone }
      items,              // optional summary for metadata
      name,               // optional customer name
    } = (req.body || {}) as any

    const amt = Math.round(Number(amount) * 100)
    if (!Number.isFinite(amt) || amt < 50) {
      return res.status(400).json({ error: 'Invalid amount (min $0.50)' })
    }

    const pi = await stripe.paymentIntents.create({
      amount: amt,
      currency,
      // Keep users on-site: allow only card + Link
      payment_method_types: ['card', 'link'],
      receipt_email: email || undefined,
      metadata: {
        name: name || '',
        email: email || '',
        items: items ? JSON.stringify(items).slice(0, 450) : '',
      },
      shipping: shipping?.address1
        ? {
            name: name || email || 'Customer',
            phone: shipping.phone || undefined,
            address: {
              line1: shipping.address1,
              line2: shipping.address2 || undefined,
              city: shipping.city,
              state: shipping.state,
              postal_code: shipping.zip,
              country: 'US',
            },
          }
        : undefined,
    })

    return res.status(200).json({ clientSecret: pi.client_secret })
  } catch (err: any) {
    return res.status(500).json({ error: err?.message || 'Stripe error' })
  }
}
// inside PaymentForm after confirmPayment succeeds without redirect
if (paymentIntent && paymentIntent.status === 'succeeded') {
  await finalizeOrder(paymentIntent.id)     // <-- pass PI id
  window.location.href = '/success'
}

